<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on shcDE Tech-Blog</title>
    <link>https://shcde.github.io/categories/development/</link>
    <description>Recent content in development on shcDE Tech-Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 24 Jul 2022 15:30:43 +0900</lastBuildDate><atom:link href="https://shcde.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>자바 공부 기록(5) - 객체지향 프로그래밍에 대해 알아볼까요?(1)</title>
      <link>https://shcde.github.io/post/java5/</link>
      <pubDate>Sun, 24 Jul 2022 15:30:43 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/java5/</guid>
      <description>자바에서 객체지향 프로그래밍은 어떻게 할까요? 안녕하세요. shcDE입니다. 이번 포스팅부터는 객체지향 프로그래밍에 대해 2~3회에 걸쳐 설명하겠습니다. 여기에서 말하는 객체지향언어란 기존의 프로그래밍 언어와 다른 전혀 새로운 것이 아니라, 기존의 프로그래밍 언어에 몇가지 새로운 규칙을 추가한 보다 발전된 형태의 언어입니다. 이러한 규칙들을 이용해서 코드 간에 서로 관계를 맺어줌으로써 보다 유기적으로 프로그램을 구성하는 것이 가능해졌습니다. 기존의 프로그래밍 언어에 익숙한 사람이라면 자바의 객체지향적인 부분만 새로 배우면 됩니다. 다만 절차적 언어에 익숙한 프로그래밍 습관을 객체지향적으로 바꾸도록 노력을 해야 할 것입니다.</description>
    </item>
    
    <item>
      <title>자바 공부 기록(4) - 배열에 대해 알아볼까요?</title>
      <link>https://shcde.github.io/post/java4/</link>
      <pubDate>Sat, 23 Jul 2022 14:12:38 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/java4/</guid>
      <description>자바에서 배열은 어떻게 사용할까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 배열에 대해 다루겠습니다. 배열이란 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것을 의미합니다. 많은 양의 데이터를 저장하기 위해서, 그 데이터의 숫자만큼 변수를 선언해야 한다면 매우 혼란스러울 것입니다. 10,000개의 데이터를 저장하기 위해 같은 수의 변수를 선언해야 한다면 상상하는 것만으로도 상당히 곤혹스러울 것입니다. 이런 경우에 배열을 사용하면 많은 양의 데이터를 손쉽게 다룰 수 있습니다. 그러면 이러한 배열을 어떻게 다루는지 지금부터 알아보도록 하겠습니다.
시작 전에, 해당 포스팅은 직접 &amp;lsquo;자바의 정석(3판)&amp;rsquo;을 구매하여 5장을 공부한 내용을 정리한 자료임을 밝힙니다.</description>
    </item>
    
    <item>
      <title>자바 공부 기록(3) - 조건문과 반복문에 대해 알아볼까요?</title>
      <link>https://shcde.github.io/post/java3/</link>
      <pubDate>Fri, 22 Jul 2022 14:06:10 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/java3/</guid>
      <description>조건문과 반복문은 어떻게 활용할까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 자바에서 어떻게 조건문과 반복문을 활용하는지 알아보겠습니다. 여기에서 조건문이란 조건에 따라 다른 문장이 수행되도록 하고, 반복문은 특정 문장들을 반복해서 수행하는 역할을 합니다. 여기에서 우선 조건문부터 확인한 이후에 반복문을 확인할 예정이며, 이번 포스팅은 내용이 다소 긴 점 양해 부탁드립니다.
시작 전에, 해당 포스팅은 직접 &amp;lsquo;자바의 정석(3판)&amp;rsquo;을 구매하여 4장을 공부한 내용을 정리한 자료임을 밝힙니다. 추가로 사용한 IDE는 &amp;lsquo;인텔리제이 IDEA CE&amp;rsquo;이며, 자바8 버전을 사용하였음을 밝힙니다.</description>
    </item>
    
    <item>
      <title>자바 공부 기록(2) - 연산자에 대해 알아볼까요?</title>
      <link>https://shcde.github.io/post/java2/</link>
      <pubDate>Thu, 21 Jul 2022 14:26:43 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/java2/</guid>
      <description>자바에서 연산자는 어떻게 활용할까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 자바에서 어떻게 연산자를 활용하는지 알아보겠습니다. 프로그래밍을 할 때 쓰이는 연산자란 &amp;lsquo;연산을 수행하는 기호&amp;rsquo;를 말합니다. 예를 들어 &amp;lsquo;+&amp;rsquo; 기호는 덧셈 연산을 수행하며, &amp;lsquo;덧셈 연산자&amp;rsquo;라고 불립니다. 자바에서는 사칙연산(+, -, *, /)을 비롯해서 다양한 연산자들을 제공합니다. 처음에는 배워야할 연산자가 많아 보이지만, 자주 쓰이는 것들을 중심으로 하여 하나씩 실습을 진행하겠습니다.
시작 전에, 해당 포스팅은 직접 &amp;lsquo;자바의 정석(3판)&amp;rsquo;을 구매하여 3장을 공부한 내용을 정리한 자료임을 밝힙니다. 추가로 사용한 IDE는 &amp;lsquo;인텔리제이 IDEA CE&amp;rsquo;이며, 자바8 버전을 사용하였음을 밝힙니다.</description>
    </item>
    
    <item>
      <title>자바 공부 기록(1) - 변수에 대해 알아볼까요?</title>
      <link>https://shcde.github.io/post/java1/</link>
      <pubDate>Wed, 20 Jul 2022 13:53:45 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/java1/</guid>
      <description>자바에서는 변수를 어떻게 활용할까요? 안녕하세요. shcDE입니다. 이번 포스팅을 시작으로 자바 기본 사용법에 대한 내용을 다루고자 합니다. 사실 자바에 대한 포스팅을 하게 된 계기는 주변을 보면 자바를 어렵게 생각하시는 분들이 많아서 어떻게 하면 자바를 좀 더 효율적으로 배울 수 있을까에 대한 고민을 하게 되었습니다. 저 또한, 프로그래밍을 학부 시절에 처음 접했을 때, 자바로 언어를 시작해서 처음에는 프로그래밍에 대해 많은 어려움이 있었던 것 같습니다. 하지만 확실히 파이썬을 어느 정도 공부한 이후에 자바를 다시 접하니, 처음 자바를 접했을 때 보다 더 효율적으로 접근할 수 있었던 것 같습니다.</description>
    </item>
    
    <item>
      <title>백엔드 엔지니어로 진로 변경을 한 이유</title>
      <link>https://shcde.github.io/post/backend/</link>
      <pubDate>Tue, 19 Jul 2022 18:26:13 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/backend/</guid>
      <description>어제까지만 해도 데이터 엔지니어링 공부를 하다가 왜 백엔드 개발로 분야를 바꾸었나? 안녕하세요. shcDE입니다. 이번 포스팅은 제가 데이터 엔지니어에서 백엔드 엔지니어로 취업 준비 분야를 변경한 이유에 대해 설명드리겠습니다. 사실 직전 포스팅까지만 해도 하둡에 대해 다루고 있었고, 원래 이번 포스팅도 카프카에 대해 다룰 예정이었습니다. 하지만 여러 고민을 한 끝에, 데이터 엔지니어 관련 분야 공부를 중단하고 백엔드 분야를 공부하기로 결심했습니다. 그래서 이번 포스팅에서는 진로 변경을 하게 된 이유에 대해 말씀드리겠습니다.
1. 데이터 엔지니어도 백엔드 지식이 있어야 더 크게 성장한다.</description>
    </item>
    
    <item>
      <title>하둡에서 YARN 명령어 실행하기</title>
      <link>https://shcde.github.io/post/yarn/</link>
      <pubDate>Mon, 18 Jul 2022 16:03:22 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/yarn/</guid>
      <description>YARN 명령어는 어떻게 사용할까요? 안녕하세요. shcDE입니다. 오늘은 하둡 v2부터 적용된 YARN에 대해 알아보겠습니다. YARN(Yet Another Resource Negotiator)은 하둡에서 도입한 클러스터 리소스 관리 및 애플리케이션 라이프 사이클 관리를 위한 아키텍처를 의미하며, 이번 포스팅에서는 스케줄러, 메모리 설정, 명령어, 노드 레이블, 타임라인 서비스 v2에 대해 알아보겠습니다. 시작 전에, 해당 포스팅은 &amp;lsquo;빅데이터 - 하둡, 하이브로 시작하기&amp;rsquo;(위키독스)를 바탕으로 작성하였음을 알려드립니다.
우선 YARN 스케줄러에 대해 알려드리겠습니다. 스케줄러는 자원 할당을 위한 정책을 의미하며, 하둡에서 제공하는 기본 스케줄러는 다음과 같습니다.</description>
    </item>
    
    <item>
      <title>파이썬을 활용하여 맵리듀스 구현하기</title>
      <link>https://shcde.github.io/post/mapreduce/</link>
      <pubDate>Sun, 17 Jul 2022 17:54:03 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/mapreduce/</guid>
      <description>맵리듀스란 무엇이고, 어떻게 파이썬으로 구현할까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 맵리듀스에 대하여 알아보겠습니다. 맵리듀스는 하둡과 파이썬에서 주로 구현할 수 있는데, 저는 이번 포스팅에서는 빠르고 간편하게 구현하기 위해 파이썬을 선택하였습니다. 여기에서 맵리듀스는 프로그래밍 모델의 역할과 동시에 구현체를 역할을 수행하는 프레임워크로, 그 구현체는 &amp;lsquo;분산처리엔진&amp;rsquo; 역할을 하는 하둡의 중심 모듈 중 하나에 해당합니다. 맵리듀스의 맵은 흩어져 잇는 데이터를 Key, Value의 형태로 연관성 있는 데이터 분류로 묶는 작업을 의미하며, 리듀스는 맵화한 작업 중 중복 데이터를 제거하고 원하는 데이터를 추출하는 작업을 뜻합니다.</description>
    </item>
    
    <item>
      <title>HDFS는 어떻게 사용할까요?(4)</title>
      <link>https://shcde.github.io/post/hdfs4/</link>
      <pubDate>Sat, 16 Jul 2022 14:45:34 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/hdfs4/</guid>
      <description>추가로 알아볼 HDFS 기능은 무엇이 있을까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 REST API 사용법, 사용량 제한 설정, RPC, 이레이져 코딩, 밸런서에 대해 알아보겠습니다. 포스팅 시작 전에, 해당 게시물은 &amp;lsquo;빅데이터 - 하둡, 하이브로 시작하기&amp;rsquo;(위키독스)를 바탕으로 작성하였음을 알려드리며, HDFS의 기본 기능에 대한 내용은 이번 포스팅을 기점으로 마무리를 할 예정입니다. 지금부터 HDFS 기초에 대한 마지막 포스팅 시작하겠습니다.
우선 WebHDFS REST API 사용법부터 알아보겠습니다. REST API(RESTful API, 레스트풀 API)란 REST 아키텍처의 제약 조건을 준수하는 애플리케이션 프로그래밍 인터페이스를 의미합니다.</description>
    </item>
    
    <item>
      <title>HDFS는 어떻게 사용할까요?(3) [HDFS 명령어(하)]</title>
      <link>https://shcde.github.io/post/hdfs3/</link>
      <pubDate>Fri, 15 Jul 2022 13:24:52 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/hdfs3/</guid>
      <description>이번에 배울 HDFS 명령어는 무엇이 있을까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 이전 포스팅에서 다루지 못했던 명령어를 다루겠습니다. 포스팅 시작 전에, 해당 게시물은 &amp;lsquo;빅데이터 - 하둡, 하이브로 시작하기&amp;rsquo;(위키독스)를 바탕으로 작성하였음을 알려드립니다.
우선 fsck 명령어에 대해 말씀드리겠습니다. fsck 커맨드는 HDFS 파일시스템의 상태를 체크하는 명령어 입니다. 해당 커맨드는 파일시스템에 블록 상태 확인, 파일의 복제 개수를 확인하여 결과를 알려줍니다. 예시와 함께 확인해보겠습니다.
fsck 명령어는 다음과 같은 형식으로 입력할 수 있습니다.
$ hdfs fsck &amp;lt;path&amp;gt; [-list-corruptfileblocks [-move | -delete | -openforwrite] [-files [-blocks [-locations | -racks]]]] [-includeSnapshots] [-storagepolicies] [-blockId &amp;lt;blk_Id&amp;gt;] fsck /는 하둡 서버 내 모든 디렉토리를 확인하는 명령어입니다.</description>
    </item>
    
    <item>
      <title>HDFS는 어떻게 사용할까요?(2) [HDFS 명령어(상)]</title>
      <link>https://shcde.github.io/post/hdfs2/</link>
      <pubDate>Thu, 14 Jul 2022 15:19:08 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/hdfs2/</guid>
      <description>HDFS 명령어는 무엇이 있을까요? 안녕하세요. shcDE입니다. 이번 포스팅에서는 HDFS 사용 시 주로 쓰이는 명령어들에 대해 설명드리고자 합니다. 원래는 한 포스팅에 모든 명령어에 대한 정보를 담고자 시도하였으나, 명령어가 제 예상보다 많아서 상, 하에 나누어 포스팅을 진행하겠습니다. 우선 시작 전에 해당 포스팅은 &amp;lsquo;빅데이터 - 하둡, 하이브로 시작하기&amp;rsquo;(위키독스)를 바탕으로 작성하였음을 알립니다.
우선 사용자 커맨드에 대해 설명드리겠습니다. 사용자 커맨드는 hdfs, hadoop 쉘을 이용할 수 있습니다. 일부 커맨드는 hdfs 쉘을 이용해야 합니다. 둘 다 이용할 수 있는 경우 각 쉘의 결과는 동일하며, 사용법은 다음과 같습니다.</description>
    </item>
    
    <item>
      <title>HDFS는 어떻게 사용할까요?(1)</title>
      <link>https://shcde.github.io/post/hdfs1/</link>
      <pubDate>Wed, 13 Jul 2022 11:51:42 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/hdfs1/</guid>
      <description>안녕하세요. shcDE입니다. 오늘은 하둡 환경에서 분산 파일 시스템 기능을 담당하는 하둡의 주요 모듈인 HDFS에 대해 다루겠습니다. 이번 포스팅에서는 HDFS의 기능 및 특징 중, 구조, Federation, 고가용성, 세이프모드, 데이터 블록 관리, 그리고 휴지통에 대한 내용을 다루고자 합니다. 해당 내용은 하둡을 설치하였다는 가정 하에 다루겠습니다. 실행 전 참고하실 사항은 Mac OS 환경인 만큼 명령어가 다르다는 점이니 확인해주시길 바랍니다.
우선 시작하기 앞서, YARN에서 namenode deamon, data node daemon, NodeManager daemon, ResourceManager를 실행해야 합니다.</description>
    </item>
    
    <item>
      <title>하둡 버전별 소개</title>
      <link>https://shcde.github.io/post/hadoop_introduce/</link>
      <pubDate>Tue, 12 Jul 2022 21:57:05 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/hadoop_introduce/</guid>
      <description>하둡은 어떤 버전들이 있고 각 버전별 차이는 무엇인가? 안녕하세요. shcDE입니다. 오늘부터 드디어 하둡에 대한 포스팅을 하려고 합니다.
이번 포스팅에서 다룰 내용은 하둡의 버전별 특징에 대한 간단한 설명입니다. 설명을 드리기 전에, 우선은 하둡에 대한 간단한 소개부터 하고자 합니다. 설명은 위키피디아 백과사전의 &amp;lsquo;아파치 하둡&amp;rsquo; 문서를 바탕으로 하겠습니다.
하둡은 대량의 자료를 처리할 수 있는 큰 컴퓨터 클러스터에서 동작하는 분산 응용 프로그램을 지원하는 프리웨어 자바 소프트웨어 프레임워크입니다. 이러한 하둡은 원래 너치의 분산 처리를 지원하기 위해 개발된 것으로, 아파치 루씬의 하부 프로젝트였습니다.</description>
    </item>
    
    <item>
      <title>신입을 위한 데이터 엔지니어링 로드맵</title>
      <link>https://shcde.github.io/post/deroadmap/</link>
      <pubDate>Fri, 08 Jul 2022 15:31:50 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/deroadmap/</guid>
      <description>데이터 엔지니어가 되려면 어떻게 공부해야 하는가? 안녕하세요. shcDE입니다. 오늘은 제가 취업 준비를 하고 있는 &amp;lsquo;데이터 엔지니어&amp;rsquo; 직무에 대한 이야기를 하고자 합니다. 저는 취업 시작과 동시에 개발 관련 오픈채팅 톡방을 통해서 로드맵을 추천받았고, 이를 토대로 여러 수정을 거친 끝에 저만의 신입 취업 준비용 로드맵을 완성할 수 있었습니다. 상단의 사진은 제가 노션으로 직접 제작한 로드맵입니다. 이번 포스팅에서는 해당 로드맵에 대한 상세한 설명을 하고자 합니다.
1. Relational Databases - Design &amp;amp; Architecture 우선 시작은 관계형 데이터베이스 공부부터 진행하였습니다.</description>
    </item>
    
    <item>
      <title>코딩테스트 플랫폼 백준 골드 달성 후기</title>
      <link>https://shcde.github.io/post/python-coding/</link>
      <pubDate>Mon, 04 Jul 2022 19:18:51 +0900</pubDate>
      
      <guid>https://shcde.github.io/post/python-coding/</guid>
      <description>두 달 전까지만 해도 비개발 직군 종사자였던 내가 골드? 안녕하세요. shcDE입니다!
이번 포스팅에서는 제가 어떻게 두 달(2022.05.09 ~ 2022.07.01) 동안 자료구조도 모른 상태에서 골드5까지 레벨업을 했는지 말씀드릴 예정입니다.
우선 저의 공부 방식은 다음과 같았습니다.
처음 2주 동안은 박상길님의 &amp;lsquo;파이썬 알고리즘 인터뷰&amp;rsquo; 책을 무턱대로 1회독을 하였습니다. 하지만 이렇게 하니까 이해는 안 되고 코드만 따라 치는 느낌이라서 공부 방식을 바꿨습니다.
우선 &amp;lsquo;seeseal&amp;rsquo;님의 벨로그의 도움을 상당히 많이 받았습니다. 이 블로그 방식대로 제 개인 노션에 공부 계획을 정리하였습니다.</description>
    </item>
    
  </channel>
</rss>
